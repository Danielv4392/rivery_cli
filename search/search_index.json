{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Rivery CLI is an amazing way to manage, deploy, run and edit rivers inside Rivery. The rivers are configured only by .yaml files, as a configuration files, makes this CLI as a basic of Infrastructure As Code (IaC) methodology. In order to start using the tool, go to the Getting Started page. Get Starting With Rivery You can check out our product docs at https://docs.rivery.io in order to getting started. Issues and Feature Requests Rivery CLI and IaC engine is fully open source dir. We're getting in warm welcome any issues/features submitted to our end, and encourage the community to contribute in the solution. Please don't hesitate to add any issues/feature request using the repo's Issues section. Contribute Rivery CLI is an open source project. You may contribute by using Fork-Pull Request method, in order to suggest changes. The main branch called main .","title":"Home"},{"location":"#overview","text":"Rivery CLI is an amazing way to manage, deploy, run and edit rivers inside Rivery. The rivers are configured only by .yaml files, as a configuration files, makes this CLI as a basic of Infrastructure As Code (IaC) methodology. In order to start using the tool, go to the Getting Started page.","title":"Overview"},{"location":"#get-starting-with-rivery","text":"You can check out our product docs at https://docs.rivery.io in order to getting started.","title":"Get Starting With Rivery"},{"location":"#issues-and-feature-requests","text":"Rivery CLI and IaC engine is fully open source dir. We're getting in warm welcome any issues/features submitted to our end, and encourage the community to contribute in the solution. Please don't hesitate to add any issues/feature request using the repo's Issues section.","title":"Issues and Feature Requests"},{"location":"#contribute","text":"Rivery CLI is an open source project. You may contribute by using Fork-Pull Request method, in order to suggest changes. The main branch called main .","title":"Contribute"},{"location":"getting-started/","text":"Getting started Requirements You must have Python 3.6 or later installed. For installation instructions, see the Downloading Python page in Python's Beginner Guide. An API Token with the following scopes: 1 2 3 4 5 6 7 8 * me:list * river:execute * river:edit * river:list * river:delete * connection:edit * connection:list * connection:delete In order to create a new API token, please refer to our docs Install Install Rivery CLI, by using the next command: 1 > pip install rivery-cli Check Installation In order to see if Rivery CLI was installed in your client, check the version option by the next command: 1 > rivery --version Result should be: 1 Rivery CLI, version ... Initiate a new project in order to start new project : 1. create new project directory, for example in linux base OS: 1 > mkdir /home/my-project or in windows: 1 > mkdir c: \\m y-project Go into the my-project directory you've created: cd my-project run the next command and choose your project name. 1 > rivery init Create the first profile Rivery CLI store defaults and credentials under an \"entity\" called profile . Each profile has its name and the configurations under it. Due to every API token refers to specific account + environment inside your Rivery console, and every account+environment pair has its own credentials, it is likely you'll have a profile per each account+environment coupling. For creating your first profile use the next command: 1 > rivery configure And Follow the prompt: 1 2 3 4 > Please enter your token. ( ****** ) : ... > Choose your Region () [ ... ] : ... > Thank you for entering auth credentials. > Please check your profile at: ~/.rivery/auth And you're good to go!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#requirements","text":"You must have Python 3.6 or later installed. For installation instructions, see the Downloading Python page in Python's Beginner Guide. An API Token with the following scopes: 1 2 3 4 5 6 7 8 * me:list * river:execute * river:edit * river:list * river:delete * connection:edit * connection:list * connection:delete In order to create a new API token, please refer to our docs","title":"Requirements"},{"location":"getting-started/#install","text":"Install Rivery CLI, by using the next command: 1 > pip install rivery-cli","title":"Install"},{"location":"getting-started/#check-installation","text":"In order to see if Rivery CLI was installed in your client, check the version option by the next command: 1 > rivery --version Result should be: 1 Rivery CLI, version ...","title":"Check Installation"},{"location":"getting-started/#initiate-a-new-project","text":"in order to start new project : 1. create new project directory, for example in linux base OS: 1 > mkdir /home/my-project or in windows: 1 > mkdir c: \\m y-project Go into the my-project directory you've created: cd my-project run the next command and choose your project name. 1 > rivery init","title":"Initiate a new project"},{"location":"getting-started/#create-the-first-profile","text":"Rivery CLI store defaults and credentials under an \"entity\" called profile . Each profile has its name and the configurations under it. Due to every API token refers to specific account + environment inside your Rivery console, and every account+environment pair has its own credentials, it is likely you'll have a profile per each account+environment coupling. For creating your first profile use the next command: 1 > rivery configure And Follow the prompt: 1 2 3 4 > Please enter your token. ( ****** ) : ... > Choose your Region () [ ... ] : ... > Thank you for entering auth credentials. > Please check your profile at: ~/.rivery/auth And you're good to go!","title":"Create the first profile"},{"location":"commands/rivery-configure/","text":"rivery configure Configure new profile and the authentication. Usage 1 Usage: rivery configure [OPTIONS] Options profile : Type: STRING Default: none Usage: --profile help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 Usage: rivery configure [OPTIONS] Configure new profile and the authentication. Options: --profile TEXT --help Show this message and exit.","title":"configure"},{"location":"commands/rivery-configure/#rivery-configure","text":"Configure new profile and the authentication.","title":"rivery configure"},{"location":"commands/rivery-configure/#usage","text":"1 Usage: rivery configure [OPTIONS]","title":"Usage"},{"location":"commands/rivery-configure/#options","text":"profile : Type: STRING Default: none Usage: --profile help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivery-configure/#cli-help","text":"1 2 3 4 5 6 7 Usage: rivery configure [OPTIONS] Configure new profile and the authentication. Options: --profile TEXT --help Show this message and exit.","title":"CLI Help"},{"location":"commands/rivery-init/","text":"rivery init Make a initiation project.yaml in the current path Usage 1 Usage: rivery init [OPTIONS] Options name : Type: STRING Default: none Usage: --name Project name models : Type: STRING Default: models Usage: --models The Models (entities) directory sqls : Type: STRING Default: sqls Usage: --sqls The sqls (queries) directory maps : Type: STRING Default: maps Usage: --maps The mapping directory help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 10 Usage: rivery init [OPTIONS] Make a initiation project.yaml in the current path Options: --name TEXT Project name --models TEXT The Models (entities) directory --sqls TEXT The sqls (queries) directory --maps TEXT The mapping directory --help Show this message and exit.","title":"init"},{"location":"commands/rivery-init/#rivery-init","text":"Make a initiation project.yaml in the current path","title":"rivery init"},{"location":"commands/rivery-init/#usage","text":"1 Usage: rivery init [OPTIONS]","title":"Usage"},{"location":"commands/rivery-init/#options","text":"name : Type: STRING Default: none Usage: --name Project name models : Type: STRING Default: models Usage: --models The Models (entities) directory sqls : Type: STRING Default: sqls Usage: --sqls The sqls (queries) directory maps : Type: STRING Default: maps Usage: --maps The mapping directory help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivery-init/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 Usage: rivery init [OPTIONS] Make a initiation project.yaml in the current path Options: --name TEXT Project name --models TEXT The Models (entities) directory --sqls TEXT The sqls (queries) directory --maps TEXT The mapping directory --help Show this message and exit.","title":"CLI Help"},{"location":"commands/rivery/","text":"rivery Rivery CLI Usage 1 Usage: rivery [OPTIONS] COMMAND [ARGS]... Options region : Type: Choice('['us-east-2', 'eu-west-1']') Default: us-east-2 Usage: --region The region of the profile to connect host : Type: STRING Default: https://console.rivery.io Usage: --host Connect to specific Rivery host (for example: https://eu-west-1.console.rivery.io) debug : Type: BOOL Default: false Usage: --debug Show debug log ignoreerros : Type: BOOL Default: false Usage: --ignoreErros Ignore errors during run. help : Type: BOOL Default: false Usage: --help Show this message and exit. version : type: BOOL default: `false' usage --version CLI Help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Usage: rivery [OPTIONS] COMMAND [ARGS]... Rivery CLI Options: --region [us-east-2|eu-west-1] The region of the profile to connect [default: us-east-2] --host TEXT Connect to specific Rivery host (for example: https://eu-west-1.console.rivery.io) --debug Show debug log --ignoreErros Ignore errors during run. --help Show this message and exit. --version Get the current version. Commands: configure Configure new profile and the authentication. init Make a initiation project.yaml in the current path rivers Rivers operations (push, pull/import)","title":"rivery"},{"location":"commands/rivery/#rivery","text":"Rivery CLI","title":"rivery"},{"location":"commands/rivery/#usage","text":"1 Usage: rivery [OPTIONS] COMMAND [ARGS]...","title":"Usage"},{"location":"commands/rivery/#options","text":"region : Type: Choice('['us-east-2', 'eu-west-1']') Default: us-east-2 Usage: --region The region of the profile to connect host : Type: STRING Default: https://console.rivery.io Usage: --host Connect to specific Rivery host (for example: https://eu-west-1.console.rivery.io) debug : Type: BOOL Default: false Usage: --debug Show debug log ignoreerros : Type: BOOL Default: false Usage: --ignoreErros Ignore errors during run. help : Type: BOOL Default: false Usage: --help Show this message and exit. version : type: BOOL default: `false' usage --version","title":"Options"},{"location":"commands/rivery/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Usage: rivery [OPTIONS] COMMAND [ARGS]... Rivery CLI Options: --region [us-east-2|eu-west-1] The region of the profile to connect [default: us-east-2] --host TEXT Connect to specific Rivery host (for example: https://eu-west-1.console.rivery.io) --debug Show debug log --ignoreErros Ignore errors during run. --help Show this message and exit. --version Get the current version. Commands: configure Configure new profile and the authentication. init Make a initiation project.yaml in the current path rivers Rivers operations (push, pull/import)","title":"CLI Help"},{"location":"commands/activities/activities-logs/","text":"activities logs Runs operations (Download runs' logs) Usage 1 Usage: rivery activities logs [OPTIONS] COMMAND [ARGS]... Options help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 Usage: rivery activities logs [OPTIONS] COMMAND [ARGS]... Runs operations (Download runs' logs) Options: --help Show this message and exit. Commands: fetch","title":"activities logs"},{"location":"commands/activities/activities-logs/#activities-logs","text":"Runs operations (Download runs' logs)","title":"activities logs"},{"location":"commands/activities/activities-logs/#usage","text":"1 Usage: rivery activities logs [OPTIONS] COMMAND [ARGS]...","title":"Usage"},{"location":"commands/activities/activities-logs/#options","text":"help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/activities/activities-logs/#cli-help","text":"1 2 3 4 5 6 7 8 9 Usage: rivery activities logs [OPTIONS] COMMAND [ARGS]... Runs operations (Download runs' logs) Options: --help Show this message and exit. Commands: fetch","title":"CLI Help"},{"location":"commands/activities/logs-fetch/","text":"logs fetch None Usage 1 Usage: rivery activities logs fetch [OPTIONS] Options runid (REQUIRED): Type: STRING Default: none Usage: --runId The run id that will be used to filter the logs. filepath : Type: STRING Default: none Usage: --filePath The file that the logs should be saved to. pretty : Type: BOOL Default: false Usage: --pretty Whether logs should be in a pretty table format or not. help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 Usage: rivery activities logs fetch [OPTIONS] Options: --runId TEXT The run id that will be used to filter the logs. [required] --filePath TEXT The file that the logs should be saved to. --pretty TEXT Whether logs should be in a pretty table format or not. --help Show this message and exit.","title":"activities logs fetch"},{"location":"commands/activities/logs-fetch/#logs-fetch","text":"None","title":"logs fetch"},{"location":"commands/activities/logs-fetch/#usage","text":"1 Usage: rivery activities logs fetch [OPTIONS]","title":"Usage"},{"location":"commands/activities/logs-fetch/#options","text":"runid (REQUIRED): Type: STRING Default: none Usage: --runId The run id that will be used to filter the logs. filepath : Type: STRING Default: none Usage: --filePath The file that the logs should be saved to. pretty : Type: BOOL Default: false Usage: --pretty Whether logs should be in a pretty table format or not. help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/activities/logs-fetch/#cli-help","text":"1 2 3 4 5 6 7 Usage: rivery activities logs fetch [OPTIONS] Options: --runId TEXT The run id that will be used to filter the logs. [required] --filePath TEXT The file that the logs should be saved to. --pretty TEXT Whether logs should be in a pretty table format or not. --help Show this message and exit.","title":"CLI Help"},{"location":"commands/activities/rivery-activities/","text":"rivery activities Activities operations (Monitor runs) Usage 1 Usage: rivery activities [OPTIONS] COMMAND [ARGS]... Options help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 Usage: rivery activities [OPTIONS] COMMAND [ARGS]... Activities operations (Monitor runs) Options: --help Show this message and exit. Commands: logs Runs operations (Download runs' logs)","title":"rivery activities"},{"location":"commands/activities/rivery-activities/#rivery-activities","text":"Activities operations (Monitor runs)","title":"rivery activities"},{"location":"commands/activities/rivery-activities/#usage","text":"1 Usage: rivery activities [OPTIONS] COMMAND [ARGS]...","title":"Usage"},{"location":"commands/activities/rivery-activities/#options","text":"help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/activities/rivery-activities/#cli-help","text":"1 2 3 4 5 6 7 8 9 Usage: rivery activities [OPTIONS] COMMAND [ARGS]... Activities operations (Monitor runs) Options: --help Show this message and exit. Commands: logs Runs operations (Download runs' logs)","title":"CLI Help"},{"location":"commands/profiles/profiles-get/","text":"profiles get Get the profiles list from the auth config file. Usage 1 Usage: profiles get [OPTIONS] Results 1 2 3 4 5 +----------------+-----------------------------+-------------+---------------+ | Profile Name | Host | Region | Token | +----------------+-----------------------------+-------------+---------------+ | default | https://console.rivery.io | us-east-2 | ******AAAaa | +----------------+-----------------------------+-------------+---------------+ Options help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 Usage: profiles get [OPTIONS] Options: --help Show this message and exit.","title":"profiles get"},{"location":"commands/profiles/profiles-get/#profiles-get","text":"Get the profiles list from the auth config file.","title":"profiles get"},{"location":"commands/profiles/profiles-get/#usage","text":"1 Usage: profiles get [OPTIONS]","title":"Usage"},{"location":"commands/profiles/profiles-get/#results","text":"1 2 3 4 5 +----------------+-----------------------------+-------------+---------------+ | Profile Name | Host | Region | Token | +----------------+-----------------------------+-------------+---------------+ | default | https://console.rivery.io | us-east-2 | ******AAAaa | +----------------+-----------------------------+-------------+---------------+","title":"Results"},{"location":"commands/profiles/profiles-get/#options","text":"help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/profiles/profiles-get/#cli-help","text":"1 2 3 4 Usage: profiles get [OPTIONS] Options: --help Show this message and exit.","title":"CLI Help"},{"location":"commands/profiles/profiles/","text":"profiles List and get profiles details Usage 1 Usage: profiles [OPTIONS] COMMAND [ARGS]... Options help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 Usage: profiles [OPTIONS] COMMAND [ARGS]... List and get profiles details Options: --help Show this message and exit. Commands: get","title":"profiles"},{"location":"commands/profiles/profiles/#profiles","text":"List and get profiles details","title":"profiles"},{"location":"commands/profiles/profiles/#usage","text":"1 Usage: profiles [OPTIONS] COMMAND [ARGS]...","title":"Usage"},{"location":"commands/profiles/profiles/#options","text":"help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/profiles/profiles/#cli-help","text":"1 2 3 4 5 6 7 8 9 Usage: profiles [OPTIONS] COMMAND [ARGS]... List and get profiles details Options: --help Show this message and exit. Commands: get","title":"CLI Help"},{"location":"commands/rivers/rivers-import/","text":"rivers import Import current river(s) into a yaml files. Get a group or river ID in the right env and account and create a yaml file per the source Usage 1 Usage: rivery rivers import [OPTIONS] Options riverid : Type: STRING Default: none Usage: --riverId Please provide at least one river id. River Id can be found in the river url, structured as this: https:// /#/river/ / /river/ groupname : Type: STRING Default: none Usage: --groupName Please provide a group name of rivers. The group name can be found near every river, in the river screen at cli. path : Type: STRING Default: none Usage: --path The path you want to import into. help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Usage: rivery rivers import [OPTIONS] Import current river(s) into a yaml files. Get a group or river ID in the right env and account and create a yaml file per the source Options: --riverId TEXT Please provide at least one river id. River Id can be found in the river url, structured as this: https://<cli-console>/ #/river/<accountId>/<environmentId>/river/**<RiverId>** --groupName TEXT Please provide a group name of rivers. The group name can be found near every river, in the river screen at cli. --path TEXT The path you want to import into. --help Show this message and exit.","title":"rivers import"},{"location":"commands/rivers/rivers-import/#rivers-import","text":"Import current river(s) into a yaml files. Get a group or river ID in the right env and account and create a yaml file per the source","title":"rivers import"},{"location":"commands/rivers/rivers-import/#usage","text":"1 Usage: rivery rivers import [OPTIONS]","title":"Usage"},{"location":"commands/rivers/rivers-import/#options","text":"riverid : Type: STRING Default: none Usage: --riverId Please provide at least one river id. River Id can be found in the river url, structured as this: https:// /#/river/ / /river/ groupname : Type: STRING Default: none Usage: --groupName Please provide a group name of rivers. The group name can be found near every river, in the river screen at cli. path : Type: STRING Default: none Usage: --path The path you want to import into. help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivers/rivers-import/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Usage: rivery rivers import [OPTIONS] Import current river(s) into a yaml files. Get a group or river ID in the right env and account and create a yaml file per the source Options: --riverId TEXT Please provide at least one river id. River Id can be found in the river url, structured as this: https://<cli-console>/ #/river/<accountId>/<environmentId>/river/**<RiverId>** --groupName TEXT Please provide a group name of rivers. The group name can be found near every river, in the river screen at cli. --path TEXT The path you want to import into. --help Show this message and exit.","title":"CLI Help"},{"location":"commands/rivers/rivers-push/","text":"rivers push None Usage 1 Usage: rivery rivers push [OPTIONS] Options paths (REQUIRED): Type: STRING Default: none Usage: --paths Provide the yaml, or base path to push help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 Usage: rivery rivers push [OPTIONS] Options: --paths TEXT Provide the yaml, or base path to push [required] --help Show this message and exit.","title":"rivers push"},{"location":"commands/rivers/rivers-push/#rivers-push","text":"None","title":"rivers push"},{"location":"commands/rivers/rivers-push/#usage","text":"1 Usage: rivery rivers push [OPTIONS]","title":"Usage"},{"location":"commands/rivers/rivers-push/#options","text":"paths (REQUIRED): Type: STRING Default: none Usage: --paths Provide the yaml, or base path to push help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivers/rivers-push/#cli-help","text":"1 2 3 4 5 Usage: rivery rivers push [OPTIONS] Options: --paths TEXT Provide the yaml, or base path to push [required] --help Show this message and exit.","title":"CLI Help"},{"location":"commands/rivers/rivers-run/","text":"rivers run Rivers operations (push, pull/import) Usage 1 Usage: rivery rivers run [OPTIONS] COMMAND [ARGS]... Options help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 10 Usage: rivery rivers run [OPTIONS] COMMAND [ARGS]... Rivers operations (push, pull/import) Options: --help Show this message and exit. Commands: fire Run a river whitin the current profile (account+environment). status Check the run status by runId","title":"rivers run"},{"location":"commands/rivers/rivers-run/#rivers-run","text":"Rivers operations (push, pull/import)","title":"rivers run"},{"location":"commands/rivers/rivers-run/#usage","text":"1 Usage: rivery rivers run [OPTIONS] COMMAND [ARGS]...","title":"Usage"},{"location":"commands/rivers/rivers-run/#options","text":"help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivers/rivers-run/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 Usage: rivery rivers run [OPTIONS] COMMAND [ARGS]... Rivers operations (push, pull/import) Options: --help Show this message and exit. Commands: fire Run a river whitin the current profile (account+environment). status Check the run status by runId","title":"CLI Help"},{"location":"commands/rivers/rivery-rivers/","text":"rivery rivers Rivers operations (push, pull/import) Usage 1 Usage: rivery rivers [OPTIONS] COMMAND [ARGS]... Options help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 10 11 Usage: rivery rivers [OPTIONS] COMMAND [ARGS]... Rivers operations (push, pull/import) Options: --help Show this message and exit. Commands: import Import current river(s) into a yaml files. push run Rivers operations (push, pull/import)","title":"rivery rivers"},{"location":"commands/rivers/rivery-rivers/#rivery-rivers","text":"Rivers operations (push, pull/import)","title":"rivery rivers"},{"location":"commands/rivers/rivery-rivers/#usage","text":"1 Usage: rivery rivers [OPTIONS] COMMAND [ARGS]...","title":"Usage"},{"location":"commands/rivers/rivery-rivers/#options","text":"help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivers/rivery-rivers/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 11 Usage: rivery rivers [OPTIONS] COMMAND [ARGS]... Rivers operations (push, pull/import) Options: --help Show this message and exit. Commands: import Import current river(s) into a yaml files. push run Rivers operations (push, pull/import)","title":"CLI Help"},{"location":"commands/rivers/run-fire/","text":"run fire Run a river whitin the current profile (account+environment). Gets a riverid key, with the river id to run and just run it in the platform. Usage 1 Usage: rivery rivers run fire [OPTIONS] Options riverid (REQUIRED): Type: STRING Default: none Usage: --riverId Please provide at least one river id to run. River Id can be found in the river url, structured as this: 1 https://<cli-console>/#/river/<accountId>/<environmentId>/river/**<RiverId>** entityname : Type: STRING Default: none Usage: --entityName waitforend : Type: BOOL Default: false Usage: --waitForEnd timeout : Type: INT Default: none Usage: --timeout The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Usage: rivery rivers run fire [OPTIONS] Run a river whitin the current profile (account+environment). Gets a riverid key, with the river id to run and just run it in the platform. Options: --riverId TEXT Please provide at least one river id to run. River Id can be found in the river url, structured as this: https://<cli-console>/#/river/<accountId>/<environmentId>/r iver/**<RiverId>** [required] --entityName TEXT --waitForEnd --timeout INTEGER The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option --help Show this message and exit.","title":"rivers run fire"},{"location":"commands/rivers/run-fire/#run-fire","text":"Run a river whitin the current profile (account+environment). Gets a riverid key, with the river id to run and just run it in the platform.","title":"run fire"},{"location":"commands/rivers/run-fire/#usage","text":"1 Usage: rivery rivers run fire [OPTIONS]","title":"Usage"},{"location":"commands/rivers/run-fire/#options","text":"riverid (REQUIRED): Type: STRING Default: none Usage: --riverId Please provide at least one river id to run. River Id can be found in the river url, structured as this: 1 https://<cli-console>/#/river/<accountId>/<environmentId>/river/**<RiverId>** entityname : Type: STRING Default: none Usage: --entityName waitforend : Type: BOOL Default: false Usage: --waitForEnd timeout : Type: INT Default: none Usage: --timeout The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivers/run-fire/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Usage: rivery rivers run fire [OPTIONS] Run a river whitin the current profile (account+environment). Gets a riverid key, with the river id to run and just run it in the platform. Options: --riverId TEXT Please provide at least one river id to run. River Id can be found in the river url, structured as this: https://<cli-console>/#/river/<accountId>/<environmentId>/r iver/**<RiverId>** [required] --entityName TEXT --waitForEnd --timeout INTEGER The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option --help Show this message and exit.","title":"CLI Help"},{"location":"commands/rivers/run-status/","text":"run status Check the run status by runId Usage 1 Usage: rivery rivers run status [OPTIONS] Options runid (REQUIRED): Type: STRING Default: none Usage: --runId The run id to check the status on. timeout : Type: INT Default: none Usage: --timeout The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option waitforend : Type: STRING Default: false Usage: --waitForEnd help : Type: BOOL Default: false Usage: --help Show this message and exit. CLI Help 1 2 3 4 5 6 7 8 9 10 11 Usage: rivery rivers run status [OPTIONS] Check the run status by runId Options: --runId TEXT The run id to check the status on. [required] --timeout INTEGER The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option --waitForEnd --help Show this message and exit.","title":"rivers run status"},{"location":"commands/rivers/run-status/#run-status","text":"Check the run status by runId","title":"run status"},{"location":"commands/rivers/run-status/#usage","text":"1 Usage: rivery rivers run status [OPTIONS]","title":"Usage"},{"location":"commands/rivers/run-status/#options","text":"runid (REQUIRED): Type: STRING Default: none Usage: --runId The run id to check the status on. timeout : Type: INT Default: none Usage: --timeout The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option waitforend : Type: STRING Default: false Usage: --waitForEnd help : Type: BOOL Default: false Usage: --help Show this message and exit.","title":"Options"},{"location":"commands/rivers/run-status/#cli-help","text":"1 2 3 4 5 6 7 8 9 10 11 Usage: rivery rivers run status [OPTIONS] Check the run status by runId Options: --runId TEXT The run id to check the status on. [required] --timeout INTEGER The number of seconds to wait for the run to complete until giving up. Eligible only on hitting --waitForEnd option --waitForEnd --help Show this message and exit.","title":"CLI Help"},{"location":"reference/authentication/","text":"Authentication The authentication using the IaC in Rivery is a token based authentication. Every token is referenced under the hood the combination of account and environment ids, the specific token can make requests to. In order to create a new token, please check out our docs . Token scopes Every token includes a list of the scope it allowed to in the platform. The needed scopes for getting started with the running rivers, using the CLI are: 1 2 3 4 5 6 7 8 * me:list * river:execute * river:edit * river:list * river:delete * connection:edit * connection:list * connection:delete Named Profile A named profile is a collection of settings and credentials that you can apply to a Rivery IaC CLI. When you specify a profile to run a command, the settings and credentials are used to run that command. You can specify the \"deault\" profile, and other profiles have names that you can specify as a parameter on the command line. Each profile has its name and the configurations under it. Due to every API token refers to specific account + environment inside your Rivery console, and every account+environment pair has its own credentials, it is likely you'll have a profile per each account + environment coupling. Auth file The profiles and other configuration kept saved under ~/.rivery/auth file. Auth file lists all the configurations of all the profiles. It is created once you hit the Rivery configure command. By default the default profile is created after hiting the confgure command, but multiple profiles can be added to the file. ~/.rivery/auth file structure 1 2 3 4 5 6 7 8 profile_name : host : https://console.rivery.io # The host the CLI, using this profile, will make the request to. # Host can be any host of rivery, such as the regular \"console\", or 'eu-west-1.console\" region : us-east-2 # The region of Rivery to request token : eyJhbGciOiJIUzI1NiIsImV4cCI6MTkzMjY2MjI1NC... # the token that had been configured using in this specific profile","title":"Authentication"},{"location":"reference/authentication/#authentication","text":"The authentication using the IaC in Rivery is a token based authentication. Every token is referenced under the hood the combination of account and environment ids, the specific token can make requests to. In order to create a new token, please check out our docs .","title":"Authentication"},{"location":"reference/authentication/#token-scopes","text":"Every token includes a list of the scope it allowed to in the platform. The needed scopes for getting started with the running rivers, using the CLI are: 1 2 3 4 5 6 7 8 * me:list * river:execute * river:edit * river:list * river:delete * connection:edit * connection:list * connection:delete","title":"Token scopes"},{"location":"reference/authentication/#named-profile","text":"A named profile is a collection of settings and credentials that you can apply to a Rivery IaC CLI. When you specify a profile to run a command, the settings and credentials are used to run that command. You can specify the \"deault\" profile, and other profiles have names that you can specify as a parameter on the command line. Each profile has its name and the configurations under it. Due to every API token refers to specific account + environment inside your Rivery console, and every account+environment pair has its own credentials, it is likely you'll have a profile per each account + environment coupling.","title":"Named Profile"},{"location":"reference/authentication/#auth-file","text":"The profiles and other configuration kept saved under ~/.rivery/auth file. Auth file lists all the configurations of all the profiles. It is created once you hit the Rivery configure command. By default the default profile is created after hiting the confgure command, but multiple profiles can be added to the file.","title":"Auth file"},{"location":"reference/authentication/#riveryauth-file-structure","text":"1 2 3 4 5 6 7 8 profile_name : host : https://console.rivery.io # The host the CLI, using this profile, will make the request to. # Host can be any host of rivery, such as the regular \"console\", or 'eu-west-1.console\" region : us-east-2 # The region of Rivery to request token : eyJhbGciOiJIUzI1NiIsImV4cCI6MTkzMjY2MjI1NC... # the token that had been configured using in this specific profile","title":"~/.rivery/auth file structure"},{"location":"reference/best-practice/","text":"How to work with Rivery CLI? Rivery CLI is an amazing way to manage, deploy, run and edit rivers inside Rivery. The rivers are configured only by .yaml files, as a configuration files, makes this CLI as a basic of Infrastructure As Code (IaC) methodology. Rivery CLI is a project based command line tool, what means the command line knows to work and operate under every directory has a project.yaml file under it. The project.yaml file provides the A project is a directory includes .sql and .yaml reference files, which represents infra entities, references and connections between them, what makes the management and handling entities in Rivery (rivers/connections) connected in one place, and can be done using Infrastructure As Code ( IaC ) methodology. In order to start new project, please check out this project's getting started guide . Referencing between entities When you configure and manage your entities, it is common to have some features which you use across several of resources. In that case, you can create a snippet for such elements in order to use them multiple times when you need it and manage them in one place. Rivery CLI provides a quick and easy way to manage entities, using a fragmented, isolated and independent references per each entity, or even per specific parts in the entities, like table references, sql clauses, variables, and references. The !ref key The basic reference key is the !ref key. Using !ref provides to create a reference (which actually concatenate) another pieces of yaml files across. For example, supposed you have a large logic entity, and you want to manage its steps in file-per-step structure. In this case, you may want to have a structure like the next: 1 2 3 4 5 rivers/ base.yaml steps/ step1.yaml step2.yaml Therefore, in order to manage each step in its own yaml file, you can create a 2 step.yaml file that will look like that: 1 2 3 4 5 6 ## Step 1.yaml type : step block_primary_type : river block_type : river river_id : 5ddbfae556740961a97f6f37 step_name : my_river_step 1 2 3 4 5 6 ## Step 2.yaml type : step block_primary_type : river block_type : river river_id : 5d49f85d03g7d930f8g7d9f step_name : my_river_step2 and connect them in the main container definition with !ref key: 1 2 3 4 5 6 7 8 steps : type : container steps : - !ref : steps/step1.yaml # Reference to the first steps definition - !ref : steps/step2.yaml # Reference to the second step definition ... The !sql key Managing sql clauses inside yaml files are not the easiest and nicest thing to perform. Therefore, in most cases, it's recommended managing SQLs in separated files, one per a query. An important ability using SQL files in separated files provide is version management using any version-control tool, such as git . For these cases, you can create the a .sql file under the sqls dir configured in the project.yaml , and use its reference on entities/mapping yaml files. The reference for using an sql query file is deteremnined by the !sql key. Moreover, using this reference provides you the way to manage the same sql query with more than one logic entity. For example, think you have a project included entities yaml with a couple of steps: 1 2 3 4 project-dir/ entities/ logics/ logic1.yaml and the logic.yaml file contains 2 sql query steps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 steps : ## Step 1.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : \"SELECT * from mydb.mytable\" step_name : my_river_step ## Step 2.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : \"SELECT * from mydb.mytable2\" step_name : my_river_step2 Therefore, instead of managing these sql inline in the yaml files, you can separate them into independent files: 1 2 /* mytable.sql */ SELECT * from mydb . mytable 1 2 /* mytable2.sql */ SELECT * from mydb . mytable The files will lay under the sqls dir as defined in the project.yaml and can be also combined under dir by their business significance : 1 2 3 4 5 6 7 8 9 project-dir/ project.yaml entities/ logics/ logic1.yaml sqls: sales/ mytable.sql mytable2.sql and create a reference in your yamls to your files: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 steps : ## Step 1.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : !sql : sales/mytable.sql step_name : my_river_step ## Step 2.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : !sql : sales/mytable2.sql step_name : my_river_step2","title":"Basics"},{"location":"reference/best-practice/#how-to-work-with-rivery-cli","text":"Rivery CLI is an amazing way to manage, deploy, run and edit rivers inside Rivery. The rivers are configured only by .yaml files, as a configuration files, makes this CLI as a basic of Infrastructure As Code (IaC) methodology. Rivery CLI is a project based command line tool, what means the command line knows to work and operate under every directory has a project.yaml file under it. The project.yaml file provides the A project is a directory includes .sql and .yaml reference files, which represents infra entities, references and connections between them, what makes the management and handling entities in Rivery (rivers/connections) connected in one place, and can be done using Infrastructure As Code ( IaC ) methodology. In order to start new project, please check out this project's getting started guide .","title":"How to work with Rivery CLI?"},{"location":"reference/best-practice/#referencing-between-entities","text":"When you configure and manage your entities, it is common to have some features which you use across several of resources. In that case, you can create a snippet for such elements in order to use them multiple times when you need it and manage them in one place. Rivery CLI provides a quick and easy way to manage entities, using a fragmented, isolated and independent references per each entity, or even per specific parts in the entities, like table references, sql clauses, variables, and references.","title":"Referencing between entities"},{"location":"reference/best-practice/#the-ref-key","text":"The basic reference key is the !ref key. Using !ref provides to create a reference (which actually concatenate) another pieces of yaml files across. For example, supposed you have a large logic entity, and you want to manage its steps in file-per-step structure. In this case, you may want to have a structure like the next: 1 2 3 4 5 rivers/ base.yaml steps/ step1.yaml step2.yaml Therefore, in order to manage each step in its own yaml file, you can create a 2 step.yaml file that will look like that: 1 2 3 4 5 6 ## Step 1.yaml type : step block_primary_type : river block_type : river river_id : 5ddbfae556740961a97f6f37 step_name : my_river_step 1 2 3 4 5 6 ## Step 2.yaml type : step block_primary_type : river block_type : river river_id : 5d49f85d03g7d930f8g7d9f step_name : my_river_step2 and connect them in the main container definition with !ref key: 1 2 3 4 5 6 7 8 steps : type : container steps : - !ref : steps/step1.yaml # Reference to the first steps definition - !ref : steps/step2.yaml # Reference to the second step definition ...","title":"The !ref key"},{"location":"reference/best-practice/#the-sql-key","text":"Managing sql clauses inside yaml files are not the easiest and nicest thing to perform. Therefore, in most cases, it's recommended managing SQLs in separated files, one per a query. An important ability using SQL files in separated files provide is version management using any version-control tool, such as git . For these cases, you can create the a .sql file under the sqls dir configured in the project.yaml , and use its reference on entities/mapping yaml files. The reference for using an sql query file is deteremnined by the !sql key. Moreover, using this reference provides you the way to manage the same sql query with more than one logic entity. For example, think you have a project included entities yaml with a couple of steps: 1 2 3 4 project-dir/ entities/ logics/ logic1.yaml and the logic.yaml file contains 2 sql query steps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 steps : ## Step 1.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : \"SELECT * from mydb.mytable\" step_name : my_river_step ## Step 2.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : \"SELECT * from mydb.mytable2\" step_name : my_river_step2 Therefore, instead of managing these sql inline in the yaml files, you can separate them into independent files: 1 2 /* mytable.sql */ SELECT * from mydb . mytable 1 2 /* mytable2.sql */ SELECT * from mydb . mytable The files will lay under the sqls dir as defined in the project.yaml and can be also combined under dir by their business significance : 1 2 3 4 5 6 7 8 9 project-dir/ project.yaml entities/ logics/ logic1.yaml sqls: sales/ mytable.sql mytable2.sql and create a reference in your yamls to your files: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 steps : ## Step 1.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : !sql : sales/mytable.sql step_name : my_river_step ## Step 2.yaml - type : step block_primary_type : sql block_db_type : ... block_type : sql sql_query : !sql : sales/mytable2.sql step_name : my_river_step2","title":"The !sql key"},{"location":"reference/project/","text":"project.yaml What is it for? The project.yaml is the file define the project structure and basic configuration. Evert Rivery IaC project needs its own project.yaml file, which indicates that the project dir is a Rivery IaC project. The CLI command knows to handle the references and connectivity between entities inside the project only under project dir. For example, a directory of my-project includes a project.yaml file, and should be used as a Rivery IaC reference project. Reference 1 2 3 4 5 name : <string> # my-project-name version : 1.0 # Rivery Iac reference version. models : <string> # the name of the \"models\" or \"entities\" dir inside the project. sqls : <string> # the name of the \"sql\" files dir isnide the project maps : <string> # the name of the mapping (table references) dir inside the project Init a new project In order to create new project inside a dir, just run the rivery init command. Importing groups/rivers Rivery CLI provide a command to create local entity yaml files from rivers in a live account/env. In order to import river or an entire group of rivers from your account to your local project, you can run the next command: 1 > rivery rivers import --groupName = 'my-group' /--riverId = '123475658493782612' --path = /import/path/under/models/dir Check out the rivery rivers import reference for more info.","title":"Project"},{"location":"reference/project/#projectyaml","text":"","title":"project.yaml"},{"location":"reference/project/#what-is-it-for","text":"The project.yaml is the file define the project structure and basic configuration. Evert Rivery IaC project needs its own project.yaml file, which indicates that the project dir is a Rivery IaC project. The CLI command knows to handle the references and connectivity between entities inside the project only under project dir. For example, a directory of my-project includes a project.yaml file, and should be used as a Rivery IaC reference project.","title":"What is it for?"},{"location":"reference/project/#reference","text":"1 2 3 4 5 name : <string> # my-project-name version : 1.0 # Rivery Iac reference version. models : <string> # the name of the \"models\" or \"entities\" dir inside the project. sqls : <string> # the name of the \"sql\" files dir isnide the project maps : <string> # the name of the mapping (table references) dir inside the project","title":"Reference"},{"location":"reference/project/#init-a-new-project","text":"In order to create new project inside a dir, just run the rivery init command.","title":"Init a new project"},{"location":"reference/project/#importing-groupsrivers","text":"Rivery CLI provide a command to create local entity yaml files from rivers in a live account/env. In order to import river or an entire group of rivers from your account to your local project, you can run the next command: 1 > rivery rivers import --groupName = 'my-group' /--riverId = '123475658493782612' --path = /import/path/under/models/dir Check out the rivery rivers import reference for more info.","title":"Importing groups/rivers"},{"location":"reference/reference/","text":"Basic Reference Rivers are referenced and defined, using the CLI, as .yaml files. Every river can be set as one file which indicates its configurations, references, state etc. All of the .yaml files and the other references (like .sql files) are laying under the same project, and this is the way they can reference to each other. The Basic .yaml structure Every .yaml file has a basic structure that required to be declared. Here's the basic structure of every rivery entity yaml: 1 2 3 4 5 6 7 8 9 rivery : cross_id : 5d1a068f7bedeb52687eef4d # uuid of the entity in Rivery. Should be filled in the first deploy (push). entity_name : string # entity name. Entity name can be used for reference to other entities under \"models\" directory. type : river # entity type. version : 0.1 # entity definition version definition : # Every entity has a \"definition\" block which include the # breakdown of all elements in the entity <river definition block>","title":"Basic Reference"},{"location":"reference/reference/#basic-reference","text":"Rivers are referenced and defined, using the CLI, as .yaml files. Every river can be set as one file which indicates its configurations, references, state etc. All of the .yaml files and the other references (like .sql files) are laying under the same project, and this is the way they can reference to each other.","title":"Basic Reference"},{"location":"reference/reference/#the-basic-yaml-structure","text":"Every .yaml file has a basic structure that required to be declared. Here's the basic structure of every rivery entity yaml: 1 2 3 4 5 6 7 8 9 rivery : cross_id : 5d1a068f7bedeb52687eef4d # uuid of the entity in Rivery. Should be filled in the first deploy (push). entity_name : string # entity name. Entity name can be used for reference to other entities under \"models\" directory. type : river # entity type. version : 0.1 # entity definition version definition : # Every entity has a \"definition\" block which include the # breakdown of all elements in the entity <river definition block>","title":"The Basic .yaml structure"},{"location":"reference/rivers/river/","text":"River Yaml Reference River yaml reference has couple of mandatory keys needed to be provided in the yaml. 1 2 3 4 5 6 7 8 9 10 name : River name. description : River Description. type : logic # The type of the river, we now support only *logic* type of river. group_name : The river group name. notifications : <notifications block> schedule : <schedule block> properties : <properties block by type> Notifications 1 2 3 4 5 6 7 8 9 10 11 12 13 14 notifications : on_failure : # On failure notification. email : myemail@mycomp.com # email to send notifications enabled : true|false on_warning : # On warning notifications email : myemail@mycomp.com # email to send notifications enabled : true|false on_run_threshold : # On runtime notification email : myemail@mycomp.com # email to send notifications enabled : true|false run_notification_timeout : 43200 # The number of seconds for sending a notification timeout, up to 43200 (12 hours). Schedule Schedule block, define the scheduling method of the river All scheduling in Rivery uses quartz expression as the scheduling expression to fire the river. 1 2 3 4 5 schedule : cronExp : 0 55 14 1 1 ? * # Quartz expression to run endDate : 2020-01-03T00:00:00 # Start date of the scheduling isEnabled : true|false # Does the scheduling enabled startDate : 2020-01-03T00:00:00 # End date of the scheduling","title":"Yaml Reference"},{"location":"reference/rivers/river/#river-yaml-reference","text":"River yaml reference has couple of mandatory keys needed to be provided in the yaml. 1 2 3 4 5 6 7 8 9 10 name : River name. description : River Description. type : logic # The type of the river, we now support only *logic* type of river. group_name : The river group name. notifications : <notifications block> schedule : <schedule block> properties : <properties block by type>","title":"River Yaml Reference"},{"location":"reference/rivers/river/#notifications","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 notifications : on_failure : # On failure notification. email : myemail@mycomp.com # email to send notifications enabled : true|false on_warning : # On warning notifications email : myemail@mycomp.com # email to send notifications enabled : true|false on_run_threshold : # On runtime notification email : myemail@mycomp.com # email to send notifications enabled : true|false run_notification_timeout : 43200 # The number of seconds for sending a notification timeout, up to 43200 (12 hours).","title":"Notifications"},{"location":"reference/rivers/river/#schedule","text":"Schedule block, define the scheduling method of the river All scheduling in Rivery uses quartz expression as the scheduling expression to fire the river. 1 2 3 4 5 schedule : cronExp : 0 55 14 1 1 ? * # Quartz expression to run endDate : 2020-01-03T00:00:00 # Start date of the scheduling isEnabled : true|false # Does the scheduling enabled startDate : 2020-01-03T00:00:00 # End date of the scheduling","title":"Schedule"},{"location":"reference/rivers/logic/logic/","text":"Logic Basic definition Every logic river is defined from basic array of steps and block of variables . * steps block is an array that include the step definitions per each step/container in the logic. * variables block is an object that define the river variables of the logic. 1 2 3 4 5 6 7 8 properties : steps : # The \"steps\" block which includes all steps # (below for each step, based on step type) - <step block 1> - <step block 2> variables : # Logic variables <variable block> Steps: The steps block which includes all steps (below for each step, based on step type) to run in the river. Every step type has it's own required and definitions, in addition to the basic step definition every step in the yaml has. Basic step definition Every step in rivery has a basic implementation as that: 1 2 3 4 5 6 7 8 steps : - type : step|container # the type of the step - \"step\" or \"container\", every type has its own definition isEnabled : true|false. # Step is enabled or not. step_name : Step Name step_type : sql|action|river|container <step block> | <container block> SQL Step SQL Step provides you the option to run query into table, variable and external file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 steps : - type : step block_primary_type : sql block_db_type : snowflake|big_query_sql|redshift|rds_pg # The step target type - Snowflake / BigQuery etc. block_type : same as block db type target_type : table|file_export|variable # Where to store the results of the SQL query # Source section # ================= connection_id : 5aa5387b5674093f6a98c600 # The connection id that is connected to this step. # In order to get the connection id, you can use Rivery API or `rivery connections` command line execute_sql_command : true|false # Use SQL Script or not in the step? query_priority : interactive # For DWH Support (BQ interactive) sql_query : \"SELECT * FROM TABLE...\" | !sql: <relative sql path under the sql directory> # The actual SQL query. The SQL can be inline or using !sql key to a specific SQL file. # e.g. `sql_query`: !sql: file_path.sql (under the SQL directory in the root directory of the project) # Target section: # ================== ## ** Table ** database : MY_DB # The target database name to send the data to schema_id : MY_SCHEMA # In compatible targets (like Snowflake) - drop_after : true|false # Should the step drop the table after the river ends target_table : MY_TABLE # The target table to load into target_loading : merge|overwrite|append # The loading method merge_method : switch_tables|delete_insert|merge # The merge method to use in compatible targets (Snowflake, Postgres). split_tables : true|false # Splitting table to table partitions, in BQ legacy mode. split_interval : d|d_h|d_h_m # Splitting interval for table partitions, in BQ Legacy mode only. use_standard_sql : true|false # In BQ only, use standard/legacy SQL fields : # The column mapping. This is optional if there are no keys. # User can either have the fields inline or !map to a table represented as yaml. - fieldName : impressions # The field name isKey : true|false # Is this field a key length : 0...2456432 # The field length (if supported) type : VARCHAR|TIMESTAMP|INTEGER... # The field type alias : impressionsnew # The target field name expression : current_timestamp() # The target field expression fields : # In case of object field type, there's a need to define the fields under it. - <fields object> | !map : <relative map path under the mapping directory> ## ** File Export ** bucket_name : MY_BUCKET # The bucket/container name compression : gzip # Does the file in the bucket is compressed or not? fzConnection : 5aa5387b5674093f6a98c600 # The filezone connection, if needed (like in custom file zone definition in the source connection) file_path_destination : PATH/TO/FILE # The file path destination to put the results on file_type : json|csv # File type - json/csv csv_details : # In a case of CSV file type, provide the csv definition header : true|false # Should we add an header to the csv delimiter : , # delimiter of the csv, default=, quote : \\\" # the quote char in the csv, default=\" ## ** Variable ** variable_name : Target variable name # variable name to send the result into Action Step Logic can run an action step, provide and gets variable data from and to the step. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 steps : - type : step block_primary_type : action block_type : action action_id : 5ddbfae556740961a97f6f37 # The action cross id to run in the logic step. # You can get the action id using the river url, and by the API, # or as a reference from another action river entity. connection_oid : 5aa5387b5674093f6a98c600 # The connection id the action will run with action_vars : # An object with the action variables to pass/get from the action, using variable mapping of key-val action_variables : # variables to pass/return to the action key : val connection_details : # The connection variables to pass in key : val interval_params : # The interval parameters to pass in key : val River Step Logic can run a river inside a step 1 2 3 4 5 6 steps : - type : step block_primary_type : river block_type : river river_id : 5ddbfae556740961a97f6f37 # The river id to run under the step. Container Steps can also be set as container type, which means they include other steps (or containers, for example). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 steps : - type : container step_name : Container Name container_running : run_once|for_loop|condition # How the container is running. # run_once = run the container on time # for_loop = run the container with for <> set in <> loop # condition = make a condition container isEnabled : true|false # does the container enabled isParallel : true|false # Should steps inside this container run in parallel loop_over_value : all_rows_var # For loop over only : the \"first\" part loop_over_variable_name : one_row_var # For loop over only : the \"set in\" part steps : - <step 1 block> - <step 2 block> - <container 1 block> ... Condition Condition is a specific type of container, which create a specific run of specific step/containers by condition flow / else flow... In condition container, the \"setting\" of each step for each condition will be added to the step itself. Condition Definition 1 2 3 4 5 6 7 8 9 condition : condition_name : Condition 1 condition_then : run_step | stop | failed | pass key : '{myvar}' # The condition key in the equation operator : equals | greater_than | lower_than | exists ... # The \"equalilty\" sign... val : my_val # The value for equals to Condition example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 steps : type : container step_name : Container Name container_running : run_once|for_loop|condition # How the container is running. # run_once = run the container on time # for_loop = run the container with for <> set in <> loop # condition = make a condition container isEnabled : true|false # does the container enabled isParallel : true|false steps : - block_primary_type : river block_type : river condition : condition_name : Condition 1 condition_then : run_step key : '{myvar}' operator : equals val : my_val - .... Variables Variables are setting up in the logic river as the local variable of the specific river. 1 2 3 4 5 6 7 variables : variable_name : # Variable name clear_value_on_start : true | false # Should the value be cleared on the start value : variable_value # The variable value","title":"Logic"},{"location":"reference/rivers/logic/logic/#logic","text":"","title":"Logic"},{"location":"reference/rivers/logic/logic/#basic-definition","text":"Every logic river is defined from basic array of steps and block of variables . * steps block is an array that include the step definitions per each step/container in the logic. * variables block is an object that define the river variables of the logic. 1 2 3 4 5 6 7 8 properties : steps : # The \"steps\" block which includes all steps # (below for each step, based on step type) - <step block 1> - <step block 2> variables : # Logic variables <variable block>","title":"Basic definition"},{"location":"reference/rivers/logic/logic/#steps","text":"The steps block which includes all steps (below for each step, based on step type) to run in the river. Every step type has it's own required and definitions, in addition to the basic step definition every step in the yaml has.","title":"Steps:"},{"location":"reference/rivers/logic/logic/#basic-step-definition","text":"Every step in rivery has a basic implementation as that: 1 2 3 4 5 6 7 8 steps : - type : step|container # the type of the step - \"step\" or \"container\", every type has its own definition isEnabled : true|false. # Step is enabled or not. step_name : Step Name step_type : sql|action|river|container <step block> | <container block>","title":"Basic step definition"},{"location":"reference/rivers/logic/logic/#sql-step","text":"SQL Step provides you the option to run query into table, variable and external file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 steps : - type : step block_primary_type : sql block_db_type : snowflake|big_query_sql|redshift|rds_pg # The step target type - Snowflake / BigQuery etc. block_type : same as block db type target_type : table|file_export|variable # Where to store the results of the SQL query # Source section # ================= connection_id : 5aa5387b5674093f6a98c600 # The connection id that is connected to this step. # In order to get the connection id, you can use Rivery API or `rivery connections` command line execute_sql_command : true|false # Use SQL Script or not in the step? query_priority : interactive # For DWH Support (BQ interactive) sql_query : \"SELECT * FROM TABLE...\" | !sql: <relative sql path under the sql directory> # The actual SQL query. The SQL can be inline or using !sql key to a specific SQL file. # e.g. `sql_query`: !sql: file_path.sql (under the SQL directory in the root directory of the project) # Target section: # ================== ## ** Table ** database : MY_DB # The target database name to send the data to schema_id : MY_SCHEMA # In compatible targets (like Snowflake) - drop_after : true|false # Should the step drop the table after the river ends target_table : MY_TABLE # The target table to load into target_loading : merge|overwrite|append # The loading method merge_method : switch_tables|delete_insert|merge # The merge method to use in compatible targets (Snowflake, Postgres). split_tables : true|false # Splitting table to table partitions, in BQ legacy mode. split_interval : d|d_h|d_h_m # Splitting interval for table partitions, in BQ Legacy mode only. use_standard_sql : true|false # In BQ only, use standard/legacy SQL fields : # The column mapping. This is optional if there are no keys. # User can either have the fields inline or !map to a table represented as yaml. - fieldName : impressions # The field name isKey : true|false # Is this field a key length : 0...2456432 # The field length (if supported) type : VARCHAR|TIMESTAMP|INTEGER... # The field type alias : impressionsnew # The target field name expression : current_timestamp() # The target field expression fields : # In case of object field type, there's a need to define the fields under it. - <fields object> | !map : <relative map path under the mapping directory> ## ** File Export ** bucket_name : MY_BUCKET # The bucket/container name compression : gzip # Does the file in the bucket is compressed or not? fzConnection : 5aa5387b5674093f6a98c600 # The filezone connection, if needed (like in custom file zone definition in the source connection) file_path_destination : PATH/TO/FILE # The file path destination to put the results on file_type : json|csv # File type - json/csv csv_details : # In a case of CSV file type, provide the csv definition header : true|false # Should we add an header to the csv delimiter : , # delimiter of the csv, default=, quote : \\\" # the quote char in the csv, default=\" ## ** Variable ** variable_name : Target variable name # variable name to send the result into","title":"SQL Step"},{"location":"reference/rivers/logic/logic/#action-step","text":"Logic can run an action step, provide and gets variable data from and to the step. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 steps : - type : step block_primary_type : action block_type : action action_id : 5ddbfae556740961a97f6f37 # The action cross id to run in the logic step. # You can get the action id using the river url, and by the API, # or as a reference from another action river entity. connection_oid : 5aa5387b5674093f6a98c600 # The connection id the action will run with action_vars : # An object with the action variables to pass/get from the action, using variable mapping of key-val action_variables : # variables to pass/return to the action key : val connection_details : # The connection variables to pass in key : val interval_params : # The interval parameters to pass in key : val","title":"Action Step"},{"location":"reference/rivers/logic/logic/#river-step","text":"Logic can run a river inside a step 1 2 3 4 5 6 steps : - type : step block_primary_type : river block_type : river river_id : 5ddbfae556740961a97f6f37 # The river id to run under the step.","title":"River Step"},{"location":"reference/rivers/logic/logic/#container","text":"Steps can also be set as container type, which means they include other steps (or containers, for example). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 steps : - type : container step_name : Container Name container_running : run_once|for_loop|condition # How the container is running. # run_once = run the container on time # for_loop = run the container with for <> set in <> loop # condition = make a condition container isEnabled : true|false # does the container enabled isParallel : true|false # Should steps inside this container run in parallel loop_over_value : all_rows_var # For loop over only : the \"first\" part loop_over_variable_name : one_row_var # For loop over only : the \"set in\" part steps : - <step 1 block> - <step 2 block> - <container 1 block> ...","title":"Container"},{"location":"reference/rivers/logic/logic/#condition","text":"Condition is a specific type of container, which create a specific run of specific step/containers by condition flow / else flow... In condition container, the \"setting\" of each step for each condition will be added to the step itself.","title":"Condition"},{"location":"reference/rivers/logic/logic/#condition-definition","text":"1 2 3 4 5 6 7 8 9 condition : condition_name : Condition 1 condition_then : run_step | stop | failed | pass key : '{myvar}' # The condition key in the equation operator : equals | greater_than | lower_than | exists ... # The \"equalilty\" sign... val : my_val # The value for equals to","title":"Condition Definition"},{"location":"reference/rivers/logic/logic/#condition-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 steps : type : container step_name : Container Name container_running : run_once|for_loop|condition # How the container is running. # run_once = run the container on time # for_loop = run the container with for <> set in <> loop # condition = make a condition container isEnabled : true|false # does the container enabled isParallel : true|false steps : - block_primary_type : river block_type : river condition : condition_name : Condition 1 condition_then : run_step key : '{myvar}' operator : equals val : my_val - ....","title":"Condition example"},{"location":"reference/rivers/logic/logic/#variables","text":"Variables are setting up in the logic river as the local variable of the specific river. 1 2 3 4 5 6 7 variables : variable_name : # Variable name clear_value_on_start : true | false # Should the value be cleared on the start value : variable_value # The variable value","title":"Variables"},{"location":"resources/faq/","text":"FAQ Which environment is best to push my YAMLs to? It is a best practice to always push your yaml filess to your development environment and only then run deployment to production through the UI. When I import again using the same river cross ID will my yaml be overridden? Yes, if you import again using the same river cross id, your yaml will be overridden, and you might lose all references. After initial import, it is best practice making all river updates in the yaml and not the UI. What happens if I don't specify --profile in my commands? If you don't specify profile, the CLI will attempt to import/push using the default configuration. What happens if I push a river with the same river_id and cross_id to a different environment? The river will be pushed to the new environemnt, as defined in the profile. How can I get more info about command running and extra logging? Use rivery --debug .. option in your commands.","title":"FAQ"},{"location":"resources/faq/#faq","text":"","title":"FAQ"},{"location":"resources/faq/#which-environment-is-best-to-push-my-yamls-to","text":"It is a best practice to always push your yaml filess to your development environment and only then run deployment to production through the UI.","title":"Which environment is best to push my YAMLs to?"},{"location":"resources/faq/#when-i-import-again-using-the-same-river-cross-id-will-my-yaml-be-overridden","text":"Yes, if you import again using the same river cross id, your yaml will be overridden, and you might lose all references. After initial import, it is best practice making all river updates in the yaml and not the UI.","title":"When I import again using the same river cross ID will my yaml be overridden?"},{"location":"resources/faq/#what-happens-if-i-dont-specify-profile-in-my-commands","text":"If you don't specify profile, the CLI will attempt to import/push using the default configuration.","title":"What happens if I don't specify --profile in my commands?"},{"location":"resources/faq/#what-happens-if-i-push-a-river-with-the-same-river_id-and-cross_id-to-a-different-environment","text":"The river will be pushed to the new environemnt, as defined in the profile.","title":"What happens if I push a river with the same river_id and cross_id to a different environment?"},{"location":"resources/faq/#how-can-i-get-more-info-about-command-running-and-extra-logging","text":"Use rivery --debug .. option in your commands.","title":"How can I get more info about command running and extra logging?"},{"location":"resources/glossary/","text":"Glossary Area Term Type Description Examples CLI rivery-cli pip install rivery-cli pip install -U rivery-cli pip uninstall rivery-cli CLI auth File auth file lists all the configurations of all the profiles. It is created once you use \"Rivery configure\". By default a default profile is created, but multiple profiles can be added to the file. Includes: host, region, and token for each profile - auth configuration can be used actoss ALL your projects CLI rivery Command Main Rivery CLI CLI version Option Rivery CLI versionn (Rivery CLI, version 0.1) rivery --version CLI region Option The region of the profile to connect CLI profile Option - TEXT Profile is a type of configuration. You can create and use multiple profiles to import/push/run rivers across different accounts and different environments rivery configure --profile=test rivery rivers import riverId=123 --profile=test rivery rivers push --paths=test --profile=demo CLI host Option - TEXT Host is the URL of the environment you are pointing to https://console.rivery.io CLI debug Show debug log CLI ignoreErrors Ignore errors during run CLI rivery initi Command Initialize the rivery cli for the first time CLI rivery configure Command Command to create a new profile: you can add --profile to specify a name, otherwise a default profile will be updated/created rivery configure --profile=test CLI profile Option - TEXT Profile is a type of configuration. You can create and use multiple profiles to import/push/run rivers across different accounts and different environments rivery configure --profile=test rivery --profile=test rivers import riverId=123 rivery --profile=demo rivers push --path=test<br> CLI rivery rivers import Command This option is used to import a logic river from Rivery account to yaml rivery --profile=test rivers import --groupName=Test Group CLI path Option - TEXT The path (under models folder) you want to import the rivers yamls to rivery rivers import --groupName=Test Group --path=cli\\_logics CLI riverId Option - TEXT The river id to import (can be found the URL) https://console.rivery.io/#/river/ / /river/ rivery rivers --profile=dev import --riverId=605508e44cd57211111111 --path=test1 CLI groupName Option - TEXT The Group name / Kit name rivery rivers import --groupName=My Group --path=test1 CLI rivery rivers run fire Command Run a river within the current profile (account_environment). Returns runId CLI riverId Option - TEXT Run by riverId https://console.rivery.io/#/river/ / /river/ rivery rivers run fire --riverId=605508e44cd57211111111 CLI waitForEnd Check river status every few seconds until it completes rivery rivers run fire --riverId=605508e44cd57211111111 --waitForEnd CLI timeout Option - INTEGER The number of seconds to wait for the run to complete until timing out (default timeout is 2 hours) rivery rivers run fire --riverId=605508e44cd57211111111 --waitForEnd --timeout=10 CLI entityName Option - TEXT CLI rivery rivers run status Command Check the run status by runId CLI runId Option - TEXT Returns the current river execution status rivery rivers run status --runId=605508e44cd57211111111 CLI waitForEnd Option Check river status every few seconds until it completes rivery rivers run status --runId=605508e44cd57211111111 --waitForEnd CLI timeout Option - INTEGER The number of seconds to wait for the run to complete until timing out (default timeout is 2 hours) rivery rivers run status --runId=605508e44cd57211111111 --waitForEnd --timeout=10 CLI rivery rivers push Command CLI paths Option - TEXT --paths TEXT Provide the yaml, or base path to push [required] rivery rivers push --paths=test rivery rivers push --paths=test/604f3221a3b1ad2c92c6419b.yaml rivery --profile=dev rivers push --paths=test1/605508e44cd57211111111.yaml YAML Project !sql Reference reference to sql file (under sqls directory), instead of having the SQL inline in the yaml file. !sql mysql.sql YAML Project !ref Reference reference to other yaml entities - such as action variables !ref action\\_vars.yaml YAML Project !map Reference reference to field mapping !map","title":"Glossary"},{"location":"resources/glossary/#glossary","text":"Area Term Type Description Examples CLI rivery-cli pip install rivery-cli pip install -U rivery-cli pip uninstall rivery-cli CLI auth File auth file lists all the configurations of all the profiles. It is created once you use \"Rivery configure\". By default a default profile is created, but multiple profiles can be added to the file. Includes: host, region, and token for each profile - auth configuration can be used actoss ALL your projects CLI rivery Command Main Rivery CLI CLI version Option Rivery CLI versionn (Rivery CLI, version 0.1) rivery --version CLI region Option The region of the profile to connect CLI profile Option - TEXT Profile is a type of configuration. You can create and use multiple profiles to import/push/run rivers across different accounts and different environments rivery configure --profile=test rivery rivers import riverId=123 --profile=test rivery rivers push --paths=test --profile=demo CLI host Option - TEXT Host is the URL of the environment you are pointing to https://console.rivery.io CLI debug Show debug log CLI ignoreErrors Ignore errors during run CLI rivery initi Command Initialize the rivery cli for the first time CLI rivery configure Command Command to create a new profile: you can add --profile to specify a name, otherwise a default profile will be updated/created rivery configure --profile=test CLI profile Option - TEXT Profile is a type of configuration. You can create and use multiple profiles to import/push/run rivers across different accounts and different environments rivery configure --profile=test rivery --profile=test rivers import riverId=123 rivery --profile=demo rivers push --path=test<br> CLI rivery rivers import Command This option is used to import a logic river from Rivery account to yaml rivery --profile=test rivers import --groupName=Test Group CLI path Option - TEXT The path (under models folder) you want to import the rivers yamls to rivery rivers import --groupName=Test Group --path=cli\\_logics CLI riverId Option - TEXT The river id to import (can be found the URL) https://console.rivery.io/#/river/ / /river/ rivery rivers --profile=dev import --riverId=605508e44cd57211111111 --path=test1 CLI groupName Option - TEXT The Group name / Kit name rivery rivers import --groupName=My Group --path=test1 CLI rivery rivers run fire Command Run a river within the current profile (account_environment). Returns runId CLI riverId Option - TEXT Run by riverId https://console.rivery.io/#/river/ / /river/ rivery rivers run fire --riverId=605508e44cd57211111111 CLI waitForEnd Check river status every few seconds until it completes rivery rivers run fire --riverId=605508e44cd57211111111 --waitForEnd CLI timeout Option - INTEGER The number of seconds to wait for the run to complete until timing out (default timeout is 2 hours) rivery rivers run fire --riverId=605508e44cd57211111111 --waitForEnd --timeout=10 CLI entityName Option - TEXT CLI rivery rivers run status Command Check the run status by runId CLI runId Option - TEXT Returns the current river execution status rivery rivers run status --runId=605508e44cd57211111111 CLI waitForEnd Option Check river status every few seconds until it completes rivery rivers run status --runId=605508e44cd57211111111 --waitForEnd CLI timeout Option - INTEGER The number of seconds to wait for the run to complete until timing out (default timeout is 2 hours) rivery rivers run status --runId=605508e44cd57211111111 --waitForEnd --timeout=10 CLI rivery rivers push Command CLI paths Option - TEXT --paths TEXT Provide the yaml, or base path to push [required] rivery rivers push --paths=test rivery rivers push --paths=test/604f3221a3b1ad2c92c6419b.yaml rivery --profile=dev rivers push --paths=test1/605508e44cd57211111111.yaml YAML Project !sql Reference reference to sql file (under sqls directory), instead of having the SQL inline in the yaml file. !sql mysql.sql YAML Project !ref Reference reference to other yaml entities - such as action variables !ref action\\_vars.yaml YAML Project !map Reference reference to field mapping !map","title":"Glossary"}]}